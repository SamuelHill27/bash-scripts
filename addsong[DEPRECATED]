#!/bin/bash

underline=`tput smul`
noUnderline=`tput rmul`
bold=`tput bold`
normal=`tput sgr0`

scriptName=$(basename $0)
scriptDir=$(dirname $0)

musicFolder="$HOME/Music/Songs"
audioExt="mp3"
browser="firefox"

error() {
	# echo error message if one has been provided
	if [ $# -gt 0 ]; then
		echo "$0: $1"
	fi

	echo "Incorrect usage of $scriptName"
	echo "Please use -h or --help option for further information"
}

help() {
	echo "$scriptName downloads a youtube $audioExt file to "
	echo $musicFolder
    echo
	echo "${bold}Usage${normal}: $scriptName [option] playlist url [title]"
    echo "${bold}playlist${normal} is the name of the playlist you want to" \
			"download the ${audioExt} file to."
	echo "${bold}url${normal} is the link to the youtube video you want to" \
			"download the ${audioExt} file of."
	echo "${bold}title${normal} is to override the mp3 file name"
	echo
	echo "Options:"
	echo " - ${bold}h${normal}        Print this help"
	echo " - ${bold}l${normal}        List all playlists (top level folders)" \
            "in the hardcoded directory."
	echo " - ${bold}r${normal}	  Remove song (mp3 and entry in m3u file)"
	echo
	echo "${bold}Dependencies${normal}:"
	echo "${bold}yt-dlp${normal} is the python program responsible for" \
			"downloading from youtube."
	echo "${underline}https://github.com/yt-dlp/yt-dlp${noUnderline}"
}

listMusicFolder() {
    # get basename of folder directories
	playlistNames=$(basename -a $(ls -d $musicFolder/*/))

    # Loop through the array and print in three columns
    for name in "${playlistNames[@]}"; do 
        printf "%-8s\n" "${name}"
    done | column
}

removeSong() {
	songName=$1

	songPath=$(find $musicFolder -type f -name "$songName")

	rm "$songPath"

	songDir=$(dirname "$songPath")
	cd "$songDir"

	playlist=$(basename "$songDir")	
	ls -1 *.$audioExt > $playlist.m3u

	echo "$songName removed"
}

validateUrl() {
	validUrlRegex='(https?|ftp|file)://[-[:alnum:]\+&@#/%?=~_|!:,.;]+'

	# validate if first argument is a url
	if ! [[ $1 =~ $validUrlRegex ]]; then
		error "url argument is not recognized as a url"
		exit 1
	fi
}

validatePlaylist() {
	# get array of folder directory basenames (names of playlists)
	playlistNames=$(basename -a $(ls -d $musicFolder/*/))

	playlistRegex="\<${1}\>" 

	if ! [[ ${playlistNames[@]} =~ $playlistRegex ]]; then
		error "playlist does not exist"
		exit 1
	fi
}

addSong() {
	playlist=$1
	url=$2
	songTitle=$3

	validateUrl $url
	validatePlaylist $playlist

	cd $musicFolder/$playlist

	# Update yt-dlp
	echo "Checking yt-dlp is up-to-date"
	yt-dlp -q -U

	# Extract audio and embed metadata (including thumbnail) from url
	echo "Downloading ${audioExt} and thumbnail"
	yt-dlp -q -x --audio-format $audioExt --add-metadata -o "$songTitle" \
		--cookies-from-browser $browser \
		--ppa "EmbedThumbnail+ffmpeg_o:-c:v mjpeg -vf crop=\"'if(gt(ih,iw),iw,ih)':'if(gt(iw,ih),ih,iw)'\"" \
		--embed-thumbnail $url

	# Overwrite m3u file with newly added song
	ls -1 *.$audioExt > $playlist.m3u

	echo "Song added!"
	echo "Song saved to $musicFolder/$songRelPath"
}

while getopts "hlr:" option; do
	case $option in
		h)
			help
			exit;;
		l)
			listMusicFolder
			exit;;
		r)
			removeSong "$OPTARG"
			exit;;
		\?)
			error
			exit;;
	esac
done

# determine if at least two arguments have been passed
if [ $# -gt 2 ]; then
	addSong $1 $2 "$3"
elif [ $# -gt 1 ]; then
	addSong $1 $2 "%(uploader)s - %(title)s.%(ext)s"
else
	error "at least two arguments required"
fi
